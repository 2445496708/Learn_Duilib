在所有的预处理指令中，#pragma 指令可能是最复杂的了，它的作用是设定编译器的状态或者是指示编译器完成一些特定的动作。
其格式一般为: #pragma  para  

#pragma  message("消息文本")

#pragma once  (比较常用) 
    只要在头文件的最开始加入这条指令就能够保证头文件被编译一次，这条指令实际上在VC6中就已经有了，
但是考虑到兼容性并没有太多的使用它。 

#pragma  code_seg( ["section-name" [, "section-class"] ] )  
    它能够设置程序中函数代码存放的代码段，当我们开发驱动程序的时候就会使用到它。
    
#pragma  hdrstop
    表示预编译头文件到此为止，后面的头文件不进行预编译。

#pragma  hdrstop
    表示预编译头文件到此为止，后面的头文件不进行预编译

#pragma  warning( disable: 4507 34; once: 4385; error: 164 )
    等价于：  
    #pragma  warning( disable: 4507 34 )    //  不显示4507和34号警告信息  
    #pragma  warning( once: 4385 )          //  4385号警告信息仅报告一次  
    #pragma  warning( error: 164 )          //  把164号警告信息作为一个错误。 

    同时这个pragma  warning  也支持如下格式：  
    #pragma  warning( push [, n ] )  
    #pragma  warning( pop )  
    这里n代表一个警告等级(1---4)。  
    #pragma  warning( push )保存所有警告信息的现有的警告状态。  
    #pragma  warning( push, n )保存所有警告信息的现有的警告状态，并且把全局警告等级设定为n。    
    #pragma  warning( pop )向栈中弹出最后一个警告信息，在入栈和出栈之间所作的一切改动取消。例如：  
    #pragma  warning( push )  
    #pragma  warning( disable: 4705 )  
    #pragma  warning( disable: 4706 )  
    #pragma  warning( disable: 4707 )  
    //.......  
    #pragma  warning(  pop  )    
    在这段代码的最后，重新保存所有的警告信息(包括4705，4706和4707)。 
    
#pragma  comment(...) 
    该指令将一个注释记录放入一个对象文件或可执行文件中。  
常用的lib关键字，可以帮我们连入一个库文件。如：
    #pragma  comment(lib, "comctl32.lib")
    #pragma  comment(lib, "vfw32.lib")
    #pragma  comment(lib, "wsock32.lib")

对循环优化功能：  
#pragma  loop_opt(on)     //  激活  
#pragma  loop_opt(off)    //  终止 

 #pragma pack 与 内存对齐问题
 

